openapi: "3.0.0"
info:
  version: 1.0.0
  title: Projekt Bus
  description: Application made as university project (Java Spring Rest MongoDB)
servers:
  - url: https://peaceful-sierra-14544.herokuapp.com/
paths:
  /users:
    get:
      tags:
        - users
      summary: |
        Get list of users
      operationId: get-users
      responses:
        200:
          description: Returns Users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      tags:
        - users
      summary: Change password
      operationId: changePassword
      requestBody:
        description: ChangePasswordTemplate object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordTemplate'
      responses:
        200:
          description: Password changed
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "BAD_REQUEST",
                "errors": [
                  "User does not exist"
                ]
              }

  /users/{login}:
    get:
      tags:
        - users
      summary: Get user by user login or email
      operationId: getUserByLogin
      parameters:
        - name: login
          in: path
          description: User login or email.
          required: true
          schema:
            type: string
      responses:
        200:
          description: User response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ObjectNotFound'
              example: User does not exist
    delete:
      tags:
        - users
      summary: Delete User by login
      operationId: deleteUserByLogin
      parameters:
        - name: login
          in: path
          description: User login
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted
        404:
          description: User not found
          content:
            text/plain:
              schema:
                type: string
                example: User does not exist

  /register:
    post:
      tags:
        - register
      summary: Register new User
      operationId: registerUser
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: User created
          headers:
            Location:
              schema:
                type: "string"
              description: URL adress of created User
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "BAD_REQUEST",
                "errors": [
                  "password: Password must contain special characters",
                  "email: Size must be between 5 and 32 letters",
                  "email: Wrong email",
                  "password: Size must be between 5 and 32 letters",
                  "login: Size must be between 5 and 32 letters",
                  "password: Password must contain number"
                ]
              }

  /login:
    post:
      tags:
        - login
      summary: Login to application
      operationId: login
      requestBody:
        description: Login field may contain user login or email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginTemplate'
      responses:
        200:
          description: User logged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
              example: {
                "response": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYWFsYSIsImlhdCI6MTU1NzA2NjE3OSwiZXhwIjoxNTU3MDczMzc5fQ.uCh5N4xNapNG9hLQDMTi_7BcFii0bb0Uq4Lsm7dTz8uEFMnDZQ075jK60s4y1D_yaT-gp34nno-8Nh78QpKYGQ"
              }
        404:
          description: Wrong credentionals
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WrongPassword'
                  - $ref: '#/components/schemas/WrongLogin'
              example: {
                "response": "Wrong login"
              }
  /remind-password{login}:
    post:
      tags:
        - remind-password
      summary: Remind User password
      operationId: remindPassword
      parameters:
        - name: login
          in: path
          description: User login or email.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Remind successful
          content:
            text/plain:
              schema:
                type: "string"
              example: Mail was sent
        404:
          description: Wrong credentionals
          content:
            text/plain:
              schema:
                type: "string"
              example: User not found
  /bus-stops:
    get:
      tags:
        - bus-stops
      summary: |
        Get list of BusStops
      operationId: getBusStops
      responses:
        200:
          description: Returns BusStops list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusStop'

    post:
      tags:
        - bus-stops
      summary: Add new BusStop
      operationId: addBusStop
      requestBody:
        description: BusStop object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBusStop'
      responses:
        201:
          description: BusStop created
          headers:
            Location:
              schema:
                type: "string"
              description: URL adress of created BusStop
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "BAD_REQUEST",
                "errors": [
                  "myGeoPoint.latitude: Wrong latitude value",
                  "name: Size must be between 5 and 32 letters",
                  "myGeoPoint.longitude: Longitude is null"
                ]
              }
  /bus-stops/{id}:
    get:
      tags:
        - bus-stops
      summary: Get busStop by id
      operationId: getBusStopById
      parameters:
        - name: id
          in: path
          description: BusStop id
          required: true
          schema:
            type: string
      responses:
        200:
          description: BusStop response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusStop"
        404:
          description: BusStop not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ObjectNotFound'
              example: BusStop does not exist
    delete:
      tags:
        - bus-stops
      summary: Delete busStop by id
      operationId: deleteBusStopById
      parameters:
        - name: id
          in: path
          description: BusStop id
          required: true
          schema:
            type: string
      responses:
        200:
          description: BusStop response
          content:
            text/plain:
              schema:
                type: string
                example: Bus stop deleted successfully
        404:
          description: BusStop not found
          content:
            text/plain:
              schema:
                type: string
                example: Bus stop does not exist

  /bus-lines:
    get:
      tags:
        - bus-lines
      summary: |
        Get list of BusLines
      operationId: getBusLines
      responses:
        200:
          description: Returns BusLines list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusLine'

    post:
      tags:
        - bus-lines
      summary: Add new BusLine
      operationId: addBusLine
      requestBody:
        description: BusLine object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBusLine'
      responses:
        201:
          description: BusLine created
          headers:
            Location:
              schema:
                type: "string"
              description: URL adress of created BusLine
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "BAD_REQUEST",
                "errors": [
                  "startBusStopId: Bus stop not found",
                  "endBusStopId: Bus stop not found",
                  "name: This field is required"
                ]
              }
  /bus-lines/{id}:
    get:
      tags:
        - bus-lines
      summary: Get BusLine by id
      operationId: getBusLineById
      parameters:
        - name: id
          in: path
          description: BusLine id
          required: true
          schema:
            type: string
      responses:
        200:
          description: BusLine response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusLine"
        404:
          description: BusLine not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ObjectNotFound'
              example: BusLine does not exist
    delete:
      tags:
        - bus-lines
      summary: Delete BusLine by id
      operationId: deleteBusLineById
      parameters:
        - name: id
          in: path
          description: BusLine id
          required: true
          schema:
            type: string
      responses:
        200:
          description: BusLine deleted
          content:
            text/plain:
              schema:
                type: string
                example: Bus line deleted successfully
        404:
          description: BusLine not found
          content:
            text/plain:
              schema:
                type: string
                example: Bus line does not exist
  /bus-lines/{busLineId}/bus-stops/{busStopId}:
    post:
      tags:
        - bus-lines
      summary: Add new BusStop to existing BusLine
      description: BusStopId must be different then BusStop used as BusLine start or end
      operationId: addBusStopToBusLine
      parameters:
        - name: busLineId
          in: path
          description: BusLine id
          required: true
          schema:
            type: string
        - name: busStopId
          in: path
          description: BusStop id
          required: true
          schema:
            type: string
      responses:
        200:
          description: BusStop added to BusLine
          content:
            text/plain:
              schema:
                type: string
                example: Bus stop added to Bus line
        404:
          description: BusLine or BusStop not found
          content:
            text/plain:
              example: Bus line does not exist || Bus stop does not exist
        409:
          description: BusStop already added
          content:
            text/plain:
              example: Bus stop already added
    delete:
      tags:
        - bus-lines
      summary: Delete BusStop from BusLine by id
      operationId: deleteBusStopFromBusLineById
      parameters:
        - name: busLineId
          in: path
          description: BusLine id
          required: true
          schema:
            type: string
        - name: busStopId
          in: path
          description: BusStop id
          required: true
          schema:
            type: string
      responses:
        200:
          description: BusStop deleted from BusLine
          content:
            text/plain:
              schema:
                type: string
                example: Bus stop deleted from bus line
        404:
          description: BusLine or BusStop not found
          content:
            text/plain:
              example: Bus line does not exist || Bus stop does not exist
        409:
          description: Bus stop not on list
          content:
            text/plain:
              example: Bus stop not on list
  /confirm-account:
    post:
      tags:
        - from-email
      summary: Confirm account from mail link
      operationId: confirmAccount
      parameters:
        - in: query
          name: tokenCode
          schema:
            type: string
          description: Confirmation token
          example: a5118be6-c8f3-4976-bc70- 8e19f776d7a5
      responses:
        200:
          description: User confirmed
        404:
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "NOT_FOUND",
                "errors": [
                  "Token not found"
                ]
              }
        409:
          description: Account already confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "CONFLICT",
                "errors": [
                  "Account already confirmed"
                ]
              }
  /remind-password:
    post:
      tags:
        - from-email
      summary: Remind password from mail link
      operationId: remindPasswordEmail
      parameters:
        - in: query
          name: tokenCode
          schema:
            type: string
          description: Reset token code
          example: a5118be6-c8f3-4976-bc70- 8e19f776d7a5
      requestBody:
        description: PasswordTemplate object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordTemplate'
      responses:
        200:
          description: User confirmed
          content:
            text/plain:
              schema:
                type: string
                example: Password changed successfully
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "BAD_REQUEST",
                "errors": [
                  "password: Password must contain special characters",
                  "password: Password must contain number"
                ]
              }
        409:
          description: Password already changed
          content:
            text/plain:
              schema:
                type: string
                example: Password already changed with this link
  /carriers:
    get:
      tags:
        - carriers
      summary: |
        Get list of Carriers
      operationId: getCarriers
      responses:
        200:
          description: Returns Carriers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Carrier'

    post:
      tags:
        - carriers
      summary: Add new Carrier
      operationId: addCarrier
      requestBody:
        description: Carrier object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCarrier'
      responses:
        201:
          description: Carrier created
          headers:
            Location:
              schema:
                type: "string"
              description: URL adress of created Carrier
        400:
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
              example: {
                "status": "BAD_REQUEST",
                "errors": [
                  "name: Carrier with this name already exists",
                ]
              }
  /carriers/{id}:
    get:
      tags:
        - carriers
      summary: Get carrier by id
      operationId: getCarrier
      parameters:
        - name: id
          in: path
          description: Carrier name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Carrier response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carrier"
        404:
          description: Carrier not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ObjectNotFound'
              example: Carrier does not exist
    delete:
      tags:
        - carriers
      summary: Delete carrier by id
      operationId: deleteCarrier
      parameters:
        - name: id
          in: path
          description: Carrier id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Carrier response
          content:
            text/plain:
              schema:
                type: string
                example: Carrier deleted successfully
        404:
          description: Carrier not found
          content:
            text/plain:
              schema:
                type: string
                example: Carrier does not exist
components:
  schemas:
    User:
      properties:
        id:
          type: string
        enabled:
          type: boolean
        login:
          type: string
          minLength: 5
          maxLength: 32
        email:
          type: string
          minLength: 5
          maxLength: 32
        password:
          type: string
          minLength: 5
          maxLength: 32

    NewUser:
      required:
        - login
        - email
        - password
      properties:
        login:
          type: string
          minLength: 5
          maxLength: 32
        email:
          type: string
          minLength: 5
          maxLength: 32
        password:
          type: string
          minLength: 5
          maxLength: 32

    BusStop:
      properties:
        id:
          type: string
        name:
          type: string
        myGeoPoint:
          $ref: '#/components/schemas/MyGeoPoint'

    NewBusStop:
      required:
        - name
      properties:
        name:
          type: string
        myGeoPoint:
          $ref: '#/components/schemas/MyGeoPoint'

    MyGeoPoint:
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: -90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180

    BusLine:
      properties:
        id:
          type: string
        startBusStopId:
          type: string
        endBusStopId:
          type: string
        busStopList:
          type: array
          items:
            $ref: '#/components/schemas/BusStop'

    NewBusLine:
      required:
        - startBusStopId
        - endBusStopId
      properties:
        startBusStopId:
          type: string
        endBusStopId:
          type: string

    Carrier:
      properties:
        id:
          type: string
        name:
          type: string

    NewCarrier:
      required:
        - name
      properties:
        name:
          type: string

    LoginTemplate:
      required:
        - login
        - password
      properties:
        login:
          type: string
        password:
          type: string

    ChangePasswordTemplate:
      required:
        - login
        - password
        - newPassword
      properties:
        login:
          type: string
        password:
          type: string
        newPassword:
          type: string
          minLength: 5
          maxLength: 32

    PasswordTemplate:
      required:
        - password
      properties:
        password:
          type: string
          minLength: 5
          maxLength: 32

    ApplicationResponse:
      properties:
        response:
          type: string

    ApplicationError:
      properties:
        status:
          type: string
        errors:
          $ref: '#/components/schemas/ErrorList'

    ErrorList:
      type: array
      items:
        properties:
          field:
            type: string

    WrongPassword:
      properties:
        message:
          type: string

    WrongLogin:
      properties:
        message:
          type: string

    ObjectNotFound:
      properties:
        message:
          type: string